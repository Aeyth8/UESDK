# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(UESDK_FETCH_BDDISASM "" OFF)
option(UESDK_FETCH_SPDLOG "" OFF)
option(UESDK_FETCH_KANANLIB "" OFF)
option(UESDK_FETCH_JSON "" OFF)
option(UESDK_FETCH_TRACY "" OFF)
option(UESDK_FETCH_GLM "" OFF)
option(UESDK_STANDALONE_BUILD "" OFF)

 
add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)

project(sdk-proj)

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MP")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP")

set(ASMJIT_STATIC ON CACHE BOOL "" FORCE)

if ("${CMAKE_BUILD_TYPE}" MATCHES "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /MT")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MT")

    # Statically compile runtime
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REGEX REPLACE "/MD" "/MT" CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE}")

    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded")
    message(NOTICE "Building in Release mode")
endif()

if(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
    # The project is being built standalone
    message(STATUS "UESDK: Building standalone")
    set(UESDK_STANDALONE_BUILD ON)
else()
    # The project is being included as part of another project
    message(STATUS "UESDK: Building as part of another project")
    set(UESDK_STANDALONE_BUILD OFF)
endif()

include(FetchContent)

# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
if(POLICY CMP0135)
	cmake_policy(SET CMP0135 NEW)
endif()
if(UESDK_FETCH_BDDISASM OR UESDK_STANDALONE_BUILD) # fetch-bddisasm
	message(STATUS "Fetching bddisasm (v1.37.0)...")
	FetchContent_Declare(bddisasm SYSTEM
		GIT_REPOSITORY
			"https://github.com/bitdefender/bddisasm"
		GIT_TAG
			v1.37.0
		GIT_SHALLOW
			ON
	)
	FetchContent_MakeAvailable(bddisasm)

endif()
if(UESDK_FETCH_SPDLOG OR UESDK_STANDALONE_BUILD) # fetch-spdlog
	message(STATUS "Fetching spdlog (v1.12.0)...")
	FetchContent_Declare(spdlog SYSTEM
		GIT_REPOSITORY
			"https://github.com/gabime/spdlog"
		GIT_TAG
			v1.12.0
		GIT_SHALLOW
			ON
	)
	FetchContent_MakeAvailable(spdlog)

endif()
if(UESDK_FETCH_KANANLIB OR UESDK_STANDALONE_BUILD) # fetch-kananlib
	message(STATUS "Fetching kananlib (7aa1816f416d605189d9e3bb6a3c8819eb80ef01)...")
	FetchContent_Declare(kananlib SYSTEM
		GIT_REPOSITORY
			"https://github.com/cursey/kananlib"
		GIT_TAG
			7aa1816f416d605189d9e3bb6a3c8819eb80ef01
	)
	FetchContent_MakeAvailable(kananlib)

endif()
if(UESDK_FETCH_JSON OR UESDK_STANDALONE_BUILD) # fetch-json
	message(STATUS "Fetching json (bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d)...")
	FetchContent_Declare(json SYSTEM
		GIT_REPOSITORY
			"https://github.com/nlohmann/json"
		GIT_TAG
			bc889afb4c5bf1c0d8ee29ef35eaaf4c8bef8a5d
	)
	FetchContent_MakeAvailable(json)

endif()
if(UESDK_FETCH_TRACY OR UESDK_STANDALONE_BUILD) # fetch-tracy
	set(TRACY_STATIC ON CACHE BOOL "" FORCE)
	set(TRACY_ENABLE OFF CACHE BOOL "" FORCE)

	message(STATUS "Fetching tracy (897aec5b062664d2485f4f9a213715d2e527e0ca)...")
	FetchContent_Declare(tracy SYSTEM
		GIT_REPOSITORY
			"https://github.com/wolfpld/tracy"
		GIT_TAG
			897aec5b062664d2485f4f9a213715d2e527e0ca
	)
	FetchContent_MakeAvailable(tracy)

endif()
if(UESDK_FETCH_GLM OR UESDK_STANDALONE_BUILD) # fetch-glm
	message(STATUS "Fetching glm (cc98465e3508535ba8c7f6208df934c156a018dc)...")
	FetchContent_Declare(glm SYSTEM
		GIT_REPOSITORY
			"https://github.com/g-truc/glm"
		GIT_TAG
			cc98465e3508535ba8c7f6208df934c156a018dc
	)
	FetchContent_MakeAvailable(glm)

endif()
# Target: uesdk
set(uesdk_SOURCES
	"src/sdk/AActor.cpp"
	"src/sdk/AHUD.cpp"
	"src/sdk/APawn.cpp"
	"src/sdk/APlayerCameraManager.cpp"
	"src/sdk/APlayerController.cpp"
	"src/sdk/CVar.cpp"
	"src/sdk/ConsoleManager.cpp"
	"src/sdk/DynamicRHI.cpp"
	"src/sdk/EngineModule.cpp"
	"src/sdk/FArrayProperty.cpp"
	"src/sdk/FBoolProperty.cpp"
	"src/sdk/FEnumProperty.cpp"
	"src/sdk/FField.cpp"
	"src/sdk/FMalloc.cpp"
	"src/sdk/FName.cpp"
	"src/sdk/FObjectProperty.cpp"
	"src/sdk/FProperty.cpp"
	"src/sdk/FRenderTargetPool.cpp"
	"src/sdk/FSceneView.cpp"
	"src/sdk/FStructProperty.cpp"
	"src/sdk/FViewport.cpp"
	"src/sdk/FViewportInfo.cpp"
	"src/sdk/Globals.cpp"
	"src/sdk/KismetSystemLibrary.cpp"
	"src/sdk/ScriptMatrix.cpp"
	"src/sdk/ScriptRotator.cpp"
	"src/sdk/ScriptTransform.cpp"
	"src/sdk/ScriptVector.cpp"
	"src/sdk/Slate.cpp"
	"src/sdk/StereoStuff.cpp"
	"src/sdk/UActorComponent.cpp"
	"src/sdk/UCameraComponent.cpp"
	"src/sdk/UClass.cpp"
	"src/sdk/UEngine.cpp"
	"src/sdk/UEnum.cpp"
	"src/sdk/UFunction.cpp"
	"src/sdk/UGameEngine.cpp"
	"src/sdk/UGameViewportClient.cpp"
	"src/sdk/UGameplayStatics.cpp"
	"src/sdk/UHeadMountedDisplayFunctionLibrary.cpp"
	"src/sdk/UMotionControllerComponent.cpp"
	"src/sdk/UObject.cpp"
	"src/sdk/UObjectArray.cpp"
	"src/sdk/UObjectBase.cpp"
	"src/sdk/UObjectHashTables.cpp"
	"src/sdk/UPrimitiveComponent.cpp"
	"src/sdk/UProperty.cpp"
	"src/sdk/USceneComponent.cpp"
	"src/sdk/Utility.cpp"
	"src/sdk/AActor.hpp"
	"src/sdk/AHUD.hpp"
	"src/sdk/APawn.hpp"
	"src/sdk/APlayerCameraManager.hpp"
	"src/sdk/APlayerController.hpp"
	"src/sdk/CVar.hpp"
	"src/sdk/ConsoleManager.hpp"
	"src/sdk/DynamicRHI.hpp"
	"src/sdk/EngineModule.hpp"
	"src/sdk/FArrayProperty.hpp"
	"src/sdk/FBoolProperty.hpp"
	"src/sdk/FEnumProperty.hpp"
	"src/sdk/FField.hpp"
	"src/sdk/FFieldClass.hpp"
	"src/sdk/FMalloc.hpp"
	"src/sdk/FName.hpp"
	"src/sdk/FObjectProperty.hpp"
	"src/sdk/FProperty.hpp"
	"src/sdk/FRenderTargetPool.hpp"
	"src/sdk/FSceneView.hpp"
	"src/sdk/FStructProperty.hpp"
	"src/sdk/FViewport.hpp"
	"src/sdk/FViewportInfo.hpp"
	"src/sdk/Globals.hpp"
	"src/sdk/KismetSystemLibrary.hpp"
	"src/sdk/Math.hpp"
	"src/sdk/RHICommandList.hpp"
	"src/sdk/ScriptMatrix.hpp"
	"src/sdk/ScriptRotator.hpp"
	"src/sdk/ScriptTransform.hpp"
	"src/sdk/ScriptVector.hpp"
	"src/sdk/Slate.hpp"
	"src/sdk/StereoStuff.hpp"
	"src/sdk/TArray.hpp"
	"src/sdk/UActorComponent.hpp"
	"src/sdk/UCameraComponent.hpp"
	"src/sdk/UClass.hpp"
	"src/sdk/UEngine.hpp"
	"src/sdk/UEnum.hpp"
	"src/sdk/UFunction.hpp"
	"src/sdk/UGameEngine.hpp"
	"src/sdk/UGameViewportClient.hpp"
	"src/sdk/UGameplayStatics.hpp"
	"src/sdk/UHeadMountedDisplayFunctionLibrary.hpp"
	"src/sdk/UMotionControllerComponent.hpp"
	"src/sdk/UObject.hpp"
	"src/sdk/UObjectArray.hpp"
	"src/sdk/UObjectBase.hpp"
	"src/sdk/UObjectHashTables.hpp"
	"src/sdk/UPrimitiveComponent.hpp"
	"src/sdk/UProperty.hpp"
	"src/sdk/USceneComponent.hpp"
	"src/sdk/UWorld.hpp"
	"src/sdk/Utility.hpp"
	"src/sdk/common/UFunctionError.hpp"
	"src/sdk/structures/Enums.hpp"
	"src/sdk/structures/FGuid.hpp"
	"src/sdk/structures/FXRHMDData.hpp"
	"src/sdk/structures/FXRMotionControllerData.hpp"
	"src/sdk/threading/GameThreadWorker.hpp"
	"src/sdk/threading/RHIThreadWorker.hpp"
	"src/sdk/threading/RenderThreadWorker.hpp"
	"src/sdk/threading/ThreadWorker.hpp"
	"src/sdk/vtables/IXRTrackingSystemVTables.hpp"
	cmake.toml
)

add_library(uesdk STATIC)

target_sources(uesdk PRIVATE ${uesdk_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${uesdk_SOURCES})

target_compile_features(uesdk PUBLIC
	cxx_std_23
)

target_compile_options(uesdk PUBLIC
	"/EHa"
	"/MP"
)

target_include_directories(uesdk PUBLIC
	"src/"
)

target_link_libraries(uesdk PUBLIC
	spdlog
	bddisasm
	bdshemu
	kananlib
	glm
	nlohmann_json
	TracyClient
)

set_target_properties(uesdk PROPERTIES
	RUNTIME_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
	RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/bin/${CMKR_TARGET}"
	LIBRARY_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	ARCHIVE_OUTPUT_DIRECTORY_RELEASE
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
	ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO
		"${CMAKE_BINARY_DIR}/lib/${CMKR_TARGET}"
)
